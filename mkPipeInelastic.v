//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Wed Dec  5 17:30:21 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1 const
// result                         O    32 reg
// RDY_result                     O     1
// RDY_acknowledge                O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_m1                       I    16 reg
// start_m2                       I    16 reg
// EN_start                       I     1
// EN_acknowledge                 I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkPipeInelastic(CLK,
		       RST_N,

		       start_m1,
		       start_m2,
		       EN_start,
		       RDY_start,

		       result,
		       RDY_result,

		       EN_acknowledge,
		       RDY_acknowledge);
  input  CLK;
  input  RST_N;

  // action method start
  input  [15 : 0] start_m1;
  input  [15 : 0] start_m2;
  input  EN_start;
  output RDY_start;

  // value method result
  output [31 : 0] result;
  output RDY_result;

  // action method acknowledge
  input  EN_acknowledge;
  output RDY_acknowledge;

  // signals for module outputs
  wire [31 : 0] result;
  wire RDY_acknowledge, RDY_result, RDY_start;

  // register available
  reg available;
  wire available$D_IN, available$EN;

  // register inputReg_garbage
  reg inputReg_garbage;
  wire inputReg_garbage$D_IN, inputReg_garbage$EN;

  // register inputReg_multiplicand
  reg [31 : 0] inputReg_multiplicand;
  wire [31 : 0] inputReg_multiplicand$D_IN;
  wire inputReg_multiplicand$EN;

  // register inputReg_multiplier
  reg [15 : 0] inputReg_multiplier;
  wire [15 : 0] inputReg_multiplier$D_IN;
  wire inputReg_multiplier$EN;

  // register inputReg_outSum
  reg [31 : 0] inputReg_outSum;
  wire [31 : 0] inputReg_outSum$D_IN;
  wire inputReg_outSum$EN;

  // register outReg_garbage
  reg outReg_garbage;
  wire outReg_garbage$D_IN, outReg_garbage$EN;

  // register outReg_multiplicand
  reg [31 : 0] outReg_multiplicand;
  wire [31 : 0] outReg_multiplicand$D_IN;
  wire outReg_multiplicand$EN;

  // register outReg_multiplier
  reg [15 : 0] outReg_multiplier;
  wire [15 : 0] outReg_multiplier$D_IN;
  wire outReg_multiplier$EN;

  // register outReg_outSum
  reg [31 : 0] outReg_outSum;
  wire [31 : 0] outReg_outSum$D_IN;
  wire outReg_outSum$EN;

  // register stageReg_0_garbage
  reg stageReg_0_garbage;
  wire stageReg_0_garbage$D_IN, stageReg_0_garbage$EN;

  // register stageReg_0_multiplicand
  reg [31 : 0] stageReg_0_multiplicand;
  wire [31 : 0] stageReg_0_multiplicand$D_IN;
  wire stageReg_0_multiplicand$EN;

  // register stageReg_0_multiplier
  reg [15 : 0] stageReg_0_multiplier;
  wire [15 : 0] stageReg_0_multiplier$D_IN;
  wire stageReg_0_multiplier$EN;

  // register stageReg_0_outSum
  reg [31 : 0] stageReg_0_outSum;
  wire [31 : 0] stageReg_0_outSum$D_IN;
  wire stageReg_0_outSum$EN;

  // register stageReg_10_garbage
  reg stageReg_10_garbage;
  wire stageReg_10_garbage$D_IN, stageReg_10_garbage$EN;

  // register stageReg_10_multiplicand
  reg [31 : 0] stageReg_10_multiplicand;
  wire [31 : 0] stageReg_10_multiplicand$D_IN;
  wire stageReg_10_multiplicand$EN;

  // register stageReg_10_multiplier
  reg [15 : 0] stageReg_10_multiplier;
  wire [15 : 0] stageReg_10_multiplier$D_IN;
  wire stageReg_10_multiplier$EN;

  // register stageReg_10_outSum
  reg [31 : 0] stageReg_10_outSum;
  wire [31 : 0] stageReg_10_outSum$D_IN;
  wire stageReg_10_outSum$EN;

  // register stageReg_11_garbage
  reg stageReg_11_garbage;
  wire stageReg_11_garbage$D_IN, stageReg_11_garbage$EN;

  // register stageReg_11_multiplicand
  reg [31 : 0] stageReg_11_multiplicand;
  wire [31 : 0] stageReg_11_multiplicand$D_IN;
  wire stageReg_11_multiplicand$EN;

  // register stageReg_11_multiplier
  reg [15 : 0] stageReg_11_multiplier;
  wire [15 : 0] stageReg_11_multiplier$D_IN;
  wire stageReg_11_multiplier$EN;

  // register stageReg_11_outSum
  reg [31 : 0] stageReg_11_outSum;
  wire [31 : 0] stageReg_11_outSum$D_IN;
  wire stageReg_11_outSum$EN;

  // register stageReg_12_garbage
  reg stageReg_12_garbage;
  wire stageReg_12_garbage$D_IN, stageReg_12_garbage$EN;

  // register stageReg_12_multiplicand
  reg [31 : 0] stageReg_12_multiplicand;
  wire [31 : 0] stageReg_12_multiplicand$D_IN;
  wire stageReg_12_multiplicand$EN;

  // register stageReg_12_multiplier
  reg [15 : 0] stageReg_12_multiplier;
  wire [15 : 0] stageReg_12_multiplier$D_IN;
  wire stageReg_12_multiplier$EN;

  // register stageReg_12_outSum
  reg [31 : 0] stageReg_12_outSum;
  wire [31 : 0] stageReg_12_outSum$D_IN;
  wire stageReg_12_outSum$EN;

  // register stageReg_13_garbage
  reg stageReg_13_garbage;
  wire stageReg_13_garbage$D_IN, stageReg_13_garbage$EN;

  // register stageReg_13_multiplicand
  reg [31 : 0] stageReg_13_multiplicand;
  wire [31 : 0] stageReg_13_multiplicand$D_IN;
  wire stageReg_13_multiplicand$EN;

  // register stageReg_13_multiplier
  reg [15 : 0] stageReg_13_multiplier;
  wire [15 : 0] stageReg_13_multiplier$D_IN;
  wire stageReg_13_multiplier$EN;

  // register stageReg_13_outSum
  reg [31 : 0] stageReg_13_outSum;
  wire [31 : 0] stageReg_13_outSum$D_IN;
  wire stageReg_13_outSum$EN;

  // register stageReg_14_garbage
  reg stageReg_14_garbage;
  wire stageReg_14_garbage$D_IN, stageReg_14_garbage$EN;

  // register stageReg_14_multiplicand
  reg [31 : 0] stageReg_14_multiplicand;
  wire [31 : 0] stageReg_14_multiplicand$D_IN;
  wire stageReg_14_multiplicand$EN;

  // register stageReg_14_multiplier
  reg [15 : 0] stageReg_14_multiplier;
  wire [15 : 0] stageReg_14_multiplier$D_IN;
  wire stageReg_14_multiplier$EN;

  // register stageReg_14_outSum
  reg [31 : 0] stageReg_14_outSum;
  wire [31 : 0] stageReg_14_outSum$D_IN;
  wire stageReg_14_outSum$EN;

  // register stageReg_15_garbage
  reg stageReg_15_garbage;
  wire stageReg_15_garbage$D_IN, stageReg_15_garbage$EN;

  // register stageReg_15_multiplicand
  reg [31 : 0] stageReg_15_multiplicand;
  wire [31 : 0] stageReg_15_multiplicand$D_IN;
  wire stageReg_15_multiplicand$EN;

  // register stageReg_15_multiplier
  reg [15 : 0] stageReg_15_multiplier;
  wire [15 : 0] stageReg_15_multiplier$D_IN;
  wire stageReg_15_multiplier$EN;

  // register stageReg_15_outSum
  reg [31 : 0] stageReg_15_outSum;
  wire [31 : 0] stageReg_15_outSum$D_IN;
  wire stageReg_15_outSum$EN;

  // register stageReg_16_garbage
  reg stageReg_16_garbage;
  wire stageReg_16_garbage$D_IN, stageReg_16_garbage$EN;

  // register stageReg_16_multiplicand
  reg [31 : 0] stageReg_16_multiplicand;
  wire [31 : 0] stageReg_16_multiplicand$D_IN;
  wire stageReg_16_multiplicand$EN;

  // register stageReg_16_multiplier
  reg [15 : 0] stageReg_16_multiplier;
  wire [15 : 0] stageReg_16_multiplier$D_IN;
  wire stageReg_16_multiplier$EN;

  // register stageReg_16_outSum
  reg [31 : 0] stageReg_16_outSum;
  wire [31 : 0] stageReg_16_outSum$D_IN;
  wire stageReg_16_outSum$EN;

  // register stageReg_1_garbage
  reg stageReg_1_garbage;
  wire stageReg_1_garbage$D_IN, stageReg_1_garbage$EN;

  // register stageReg_1_multiplicand
  reg [31 : 0] stageReg_1_multiplicand;
  wire [31 : 0] stageReg_1_multiplicand$D_IN;
  wire stageReg_1_multiplicand$EN;

  // register stageReg_1_multiplier
  reg [15 : 0] stageReg_1_multiplier;
  wire [15 : 0] stageReg_1_multiplier$D_IN;
  wire stageReg_1_multiplier$EN;

  // register stageReg_1_outSum
  reg [31 : 0] stageReg_1_outSum;
  wire [31 : 0] stageReg_1_outSum$D_IN;
  wire stageReg_1_outSum$EN;

  // register stageReg_2_garbage
  reg stageReg_2_garbage;
  wire stageReg_2_garbage$D_IN, stageReg_2_garbage$EN;

  // register stageReg_2_multiplicand
  reg [31 : 0] stageReg_2_multiplicand;
  wire [31 : 0] stageReg_2_multiplicand$D_IN;
  wire stageReg_2_multiplicand$EN;

  // register stageReg_2_multiplier
  reg [15 : 0] stageReg_2_multiplier;
  wire [15 : 0] stageReg_2_multiplier$D_IN;
  wire stageReg_2_multiplier$EN;

  // register stageReg_2_outSum
  reg [31 : 0] stageReg_2_outSum;
  wire [31 : 0] stageReg_2_outSum$D_IN;
  wire stageReg_2_outSum$EN;

  // register stageReg_3_garbage
  reg stageReg_3_garbage;
  wire stageReg_3_garbage$D_IN, stageReg_3_garbage$EN;

  // register stageReg_3_multiplicand
  reg [31 : 0] stageReg_3_multiplicand;
  wire [31 : 0] stageReg_3_multiplicand$D_IN;
  wire stageReg_3_multiplicand$EN;

  // register stageReg_3_multiplier
  reg [15 : 0] stageReg_3_multiplier;
  wire [15 : 0] stageReg_3_multiplier$D_IN;
  wire stageReg_3_multiplier$EN;

  // register stageReg_3_outSum
  reg [31 : 0] stageReg_3_outSum;
  wire [31 : 0] stageReg_3_outSum$D_IN;
  wire stageReg_3_outSum$EN;

  // register stageReg_4_garbage
  reg stageReg_4_garbage;
  wire stageReg_4_garbage$D_IN, stageReg_4_garbage$EN;

  // register stageReg_4_multiplicand
  reg [31 : 0] stageReg_4_multiplicand;
  wire [31 : 0] stageReg_4_multiplicand$D_IN;
  wire stageReg_4_multiplicand$EN;

  // register stageReg_4_multiplier
  reg [15 : 0] stageReg_4_multiplier;
  wire [15 : 0] stageReg_4_multiplier$D_IN;
  wire stageReg_4_multiplier$EN;

  // register stageReg_4_outSum
  reg [31 : 0] stageReg_4_outSum;
  wire [31 : 0] stageReg_4_outSum$D_IN;
  wire stageReg_4_outSum$EN;

  // register stageReg_5_garbage
  reg stageReg_5_garbage;
  wire stageReg_5_garbage$D_IN, stageReg_5_garbage$EN;

  // register stageReg_5_multiplicand
  reg [31 : 0] stageReg_5_multiplicand;
  wire [31 : 0] stageReg_5_multiplicand$D_IN;
  wire stageReg_5_multiplicand$EN;

  // register stageReg_5_multiplier
  reg [15 : 0] stageReg_5_multiplier;
  wire [15 : 0] stageReg_5_multiplier$D_IN;
  wire stageReg_5_multiplier$EN;

  // register stageReg_5_outSum
  reg [31 : 0] stageReg_5_outSum;
  wire [31 : 0] stageReg_5_outSum$D_IN;
  wire stageReg_5_outSum$EN;

  // register stageReg_6_garbage
  reg stageReg_6_garbage;
  wire stageReg_6_garbage$D_IN, stageReg_6_garbage$EN;

  // register stageReg_6_multiplicand
  reg [31 : 0] stageReg_6_multiplicand;
  wire [31 : 0] stageReg_6_multiplicand$D_IN;
  wire stageReg_6_multiplicand$EN;

  // register stageReg_6_multiplier
  reg [15 : 0] stageReg_6_multiplier;
  wire [15 : 0] stageReg_6_multiplier$D_IN;
  wire stageReg_6_multiplier$EN;

  // register stageReg_6_outSum
  reg [31 : 0] stageReg_6_outSum;
  wire [31 : 0] stageReg_6_outSum$D_IN;
  wire stageReg_6_outSum$EN;

  // register stageReg_7_garbage
  reg stageReg_7_garbage;
  wire stageReg_7_garbage$D_IN, stageReg_7_garbage$EN;

  // register stageReg_7_multiplicand
  reg [31 : 0] stageReg_7_multiplicand;
  wire [31 : 0] stageReg_7_multiplicand$D_IN;
  wire stageReg_7_multiplicand$EN;

  // register stageReg_7_multiplier
  reg [15 : 0] stageReg_7_multiplier;
  wire [15 : 0] stageReg_7_multiplier$D_IN;
  wire stageReg_7_multiplier$EN;

  // register stageReg_7_outSum
  reg [31 : 0] stageReg_7_outSum;
  wire [31 : 0] stageReg_7_outSum$D_IN;
  wire stageReg_7_outSum$EN;

  // register stageReg_8_garbage
  reg stageReg_8_garbage;
  wire stageReg_8_garbage$D_IN, stageReg_8_garbage$EN;

  // register stageReg_8_multiplicand
  reg [31 : 0] stageReg_8_multiplicand;
  wire [31 : 0] stageReg_8_multiplicand$D_IN;
  wire stageReg_8_multiplicand$EN;

  // register stageReg_8_multiplier
  reg [15 : 0] stageReg_8_multiplier;
  wire [15 : 0] stageReg_8_multiplier$D_IN;
  wire stageReg_8_multiplier$EN;

  // register stageReg_8_outSum
  reg [31 : 0] stageReg_8_outSum;
  wire [31 : 0] stageReg_8_outSum$D_IN;
  wire stageReg_8_outSum$EN;

  // register stageReg_9_garbage
  reg stageReg_9_garbage;
  wire stageReg_9_garbage$D_IN, stageReg_9_garbage$EN;

  // register stageReg_9_multiplicand
  reg [31 : 0] stageReg_9_multiplicand;
  wire [31 : 0] stageReg_9_multiplicand$D_IN;
  wire stageReg_9_multiplicand$EN;

  // register stageReg_9_multiplier
  reg [15 : 0] stageReg_9_multiplier;
  wire [15 : 0] stageReg_9_multiplier$D_IN;
  wire stageReg_9_multiplier$EN;

  // register stageReg_9_outSum
  reg [31 : 0] stageReg_9_outSum;
  wire [31 : 0] stageReg_9_outSum$D_IN;
  wire stageReg_9_outSum$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_cycle,
       CAN_FIRE_acknowledge,
       CAN_FIRE_start,
       WILL_FIRE_RL_cycle,
       WILL_FIRE_acknowledge,
       WILL_FIRE_start;

  // action method start
  assign RDY_start = 1'd1 ;
  assign CAN_FIRE_start = 1'd1 ;
  assign WILL_FIRE_start = EN_start ;

  // value method result
  assign result = stageReg_16_outSum ;
  assign RDY_result = !stageReg_16_garbage ;

  // action method acknowledge
  assign RDY_acknowledge = !available ;
  assign CAN_FIRE_acknowledge = !available ;
  assign WILL_FIRE_acknowledge = EN_acknowledge ;

  // rule RL_cycle
  assign CAN_FIRE_RL_cycle = !stageReg_0_garbage ;
  assign WILL_FIRE_RL_cycle = CAN_FIRE_RL_cycle ;

  // register available
  assign available$D_IN = 1'd1 ;
  assign available$EN = EN_acknowledge ;

  // register inputReg_garbage
  assign inputReg_garbage$D_IN = 1'b0 ;
  assign inputReg_garbage$EN = 1'b0 ;

  // register inputReg_multiplicand
  assign inputReg_multiplicand$D_IN = 32'h0 ;
  assign inputReg_multiplicand$EN = 1'b0 ;

  // register inputReg_multiplier
  assign inputReg_multiplier$D_IN = 16'h0 ;
  assign inputReg_multiplier$EN = 1'b0 ;

  // register inputReg_outSum
  assign inputReg_outSum$D_IN = 32'h0 ;
  assign inputReg_outSum$EN = 1'b0 ;

  // register outReg_garbage
  assign outReg_garbage$D_IN = 1'b0 ;
  assign outReg_garbage$EN = 1'b0 ;

  // register outReg_multiplicand
  assign outReg_multiplicand$D_IN = 32'h0 ;
  assign outReg_multiplicand$EN = 1'b0 ;

  // register outReg_multiplier
  assign outReg_multiplier$D_IN = 16'h0 ;
  assign outReg_multiplier$EN = 1'b0 ;

  // register outReg_outSum
  assign outReg_outSum$D_IN = 32'h0 ;
  assign outReg_outSum$EN = 1'b0 ;

  // register stageReg_0_garbage
  assign stageReg_0_garbage$D_IN = !EN_start ;
  assign stageReg_0_garbage$EN = EN_start || WILL_FIRE_RL_cycle ;

  // register stageReg_0_multiplicand
  assign stageReg_0_multiplicand$D_IN = { 16'd0, start_m1 } ;
  assign stageReg_0_multiplicand$EN = EN_start ;

  // register stageReg_0_multiplier
  assign stageReg_0_multiplier$D_IN = start_m2 ;
  assign stageReg_0_multiplier$EN = EN_start ;

  // register stageReg_0_outSum
  assign stageReg_0_outSum$D_IN = 32'd0 ;
  assign stageReg_0_outSum$EN = EN_start ;

  // register stageReg_10_garbage
  assign stageReg_10_garbage$D_IN = stageReg_9_garbage ;
  assign stageReg_10_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_10_multiplicand
  assign stageReg_10_multiplicand$D_IN =
	     { stageReg_9_multiplicand[30:0], 1'd0 } ;
  assign stageReg_10_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_10_multiplier
  assign stageReg_10_multiplier$D_IN = { 1'd0, stageReg_9_multiplier[15:1] } ;
  assign stageReg_10_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_10_outSum
  assign stageReg_10_outSum$D_IN =
	     stageReg_9_multiplier[0] ?
	       stageReg_9_outSum + stageReg_9_multiplicand :
	       stageReg_9_outSum ;
  assign stageReg_10_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_11_garbage
  assign stageReg_11_garbage$D_IN = stageReg_10_garbage ;
  assign stageReg_11_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_11_multiplicand
  assign stageReg_11_multiplicand$D_IN =
	     { stageReg_10_multiplicand[30:0], 1'd0 } ;
  assign stageReg_11_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_11_multiplier
  assign stageReg_11_multiplier$D_IN =
	     { 1'd0, stageReg_10_multiplier[15:1] } ;
  assign stageReg_11_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_11_outSum
  assign stageReg_11_outSum$D_IN =
	     stageReg_10_multiplier[0] ?
	       stageReg_10_outSum + stageReg_10_multiplicand :
	       stageReg_10_outSum ;
  assign stageReg_11_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_12_garbage
  assign stageReg_12_garbage$D_IN = stageReg_11_garbage ;
  assign stageReg_12_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_12_multiplicand
  assign stageReg_12_multiplicand$D_IN =
	     { stageReg_11_multiplicand[30:0], 1'd0 } ;
  assign stageReg_12_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_12_multiplier
  assign stageReg_12_multiplier$D_IN =
	     { 1'd0, stageReg_11_multiplier[15:1] } ;
  assign stageReg_12_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_12_outSum
  assign stageReg_12_outSum$D_IN =
	     stageReg_11_multiplier[0] ?
	       stageReg_11_outSum + stageReg_11_multiplicand :
	       stageReg_11_outSum ;
  assign stageReg_12_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_13_garbage
  assign stageReg_13_garbage$D_IN = stageReg_12_garbage ;
  assign stageReg_13_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_13_multiplicand
  assign stageReg_13_multiplicand$D_IN =
	     { stageReg_12_multiplicand[30:0], 1'd0 } ;
  assign stageReg_13_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_13_multiplier
  assign stageReg_13_multiplier$D_IN =
	     { 1'd0, stageReg_12_multiplier[15:1] } ;
  assign stageReg_13_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_13_outSum
  assign stageReg_13_outSum$D_IN =
	     stageReg_12_multiplier[0] ?
	       stageReg_12_outSum + stageReg_12_multiplicand :
	       stageReg_12_outSum ;
  assign stageReg_13_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_14_garbage
  assign stageReg_14_garbage$D_IN = stageReg_13_garbage ;
  assign stageReg_14_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_14_multiplicand
  assign stageReg_14_multiplicand$D_IN =
	     { stageReg_13_multiplicand[30:0], 1'd0 } ;
  assign stageReg_14_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_14_multiplier
  assign stageReg_14_multiplier$D_IN =
	     { 1'd0, stageReg_13_multiplier[15:1] } ;
  assign stageReg_14_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_14_outSum
  assign stageReg_14_outSum$D_IN =
	     stageReg_13_multiplier[0] ?
	       stageReg_13_outSum + stageReg_13_multiplicand :
	       stageReg_13_outSum ;
  assign stageReg_14_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_15_garbage
  assign stageReg_15_garbage$D_IN = stageReg_14_garbage ;
  assign stageReg_15_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_15_multiplicand
  assign stageReg_15_multiplicand$D_IN =
	     { stageReg_14_multiplicand[30:0], 1'd0 } ;
  assign stageReg_15_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_15_multiplier
  assign stageReg_15_multiplier$D_IN =
	     { 1'd0, stageReg_14_multiplier[15:1] } ;
  assign stageReg_15_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_15_outSum
  assign stageReg_15_outSum$D_IN =
	     stageReg_14_multiplier[0] ?
	       stageReg_14_outSum + stageReg_14_multiplicand :
	       stageReg_14_outSum ;
  assign stageReg_15_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_16_garbage
  assign stageReg_16_garbage$D_IN = stageReg_15_garbage ;
  assign stageReg_16_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_16_multiplicand
  assign stageReg_16_multiplicand$D_IN =
	     { stageReg_15_multiplicand[30:0], 1'd0 } ;
  assign stageReg_16_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_16_multiplier
  assign stageReg_16_multiplier$D_IN =
	     { 1'd0, stageReg_15_multiplier[15:1] } ;
  assign stageReg_16_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_16_outSum
  assign stageReg_16_outSum$D_IN =
	     stageReg_15_multiplier[0] ?
	       stageReg_15_outSum + stageReg_15_multiplicand :
	       stageReg_15_outSum ;
  assign stageReg_16_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_1_garbage
  assign stageReg_1_garbage$D_IN = stageReg_0_garbage ;
  assign stageReg_1_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_1_multiplicand
  assign stageReg_1_multiplicand$D_IN =
	     { stageReg_0_multiplicand[30:0], 1'd0 } ;
  assign stageReg_1_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_1_multiplier
  assign stageReg_1_multiplier$D_IN = { 1'd0, stageReg_0_multiplier[15:1] } ;
  assign stageReg_1_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_1_outSum
  assign stageReg_1_outSum$D_IN =
	     stageReg_0_multiplier[0] ?
	       stageReg_0_outSum + stageReg_0_multiplicand :
	       stageReg_0_outSum ;
  assign stageReg_1_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_2_garbage
  assign stageReg_2_garbage$D_IN = stageReg_1_garbage ;
  assign stageReg_2_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_2_multiplicand
  assign stageReg_2_multiplicand$D_IN =
	     { stageReg_1_multiplicand[30:0], 1'd0 } ;
  assign stageReg_2_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_2_multiplier
  assign stageReg_2_multiplier$D_IN = { 1'd0, stageReg_1_multiplier[15:1] } ;
  assign stageReg_2_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_2_outSum
  assign stageReg_2_outSum$D_IN =
	     stageReg_1_multiplier[0] ?
	       stageReg_1_outSum + stageReg_1_multiplicand :
	       stageReg_1_outSum ;
  assign stageReg_2_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_3_garbage
  assign stageReg_3_garbage$D_IN = stageReg_2_garbage ;
  assign stageReg_3_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_3_multiplicand
  assign stageReg_3_multiplicand$D_IN =
	     { stageReg_2_multiplicand[30:0], 1'd0 } ;
  assign stageReg_3_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_3_multiplier
  assign stageReg_3_multiplier$D_IN = { 1'd0, stageReg_2_multiplier[15:1] } ;
  assign stageReg_3_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_3_outSum
  assign stageReg_3_outSum$D_IN =
	     stageReg_2_multiplier[0] ?
	       stageReg_2_outSum + stageReg_2_multiplicand :
	       stageReg_2_outSum ;
  assign stageReg_3_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_4_garbage
  assign stageReg_4_garbage$D_IN = stageReg_3_garbage ;
  assign stageReg_4_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_4_multiplicand
  assign stageReg_4_multiplicand$D_IN =
	     { stageReg_3_multiplicand[30:0], 1'd0 } ;
  assign stageReg_4_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_4_multiplier
  assign stageReg_4_multiplier$D_IN = { 1'd0, stageReg_3_multiplier[15:1] } ;
  assign stageReg_4_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_4_outSum
  assign stageReg_4_outSum$D_IN =
	     stageReg_3_multiplier[0] ?
	       stageReg_3_outSum + stageReg_3_multiplicand :
	       stageReg_3_outSum ;
  assign stageReg_4_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_5_garbage
  assign stageReg_5_garbage$D_IN = stageReg_4_garbage ;
  assign stageReg_5_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_5_multiplicand
  assign stageReg_5_multiplicand$D_IN =
	     { stageReg_4_multiplicand[30:0], 1'd0 } ;
  assign stageReg_5_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_5_multiplier
  assign stageReg_5_multiplier$D_IN = { 1'd0, stageReg_4_multiplier[15:1] } ;
  assign stageReg_5_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_5_outSum
  assign stageReg_5_outSum$D_IN =
	     stageReg_4_multiplier[0] ?
	       stageReg_4_outSum + stageReg_4_multiplicand :
	       stageReg_4_outSum ;
  assign stageReg_5_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_6_garbage
  assign stageReg_6_garbage$D_IN = stageReg_5_garbage ;
  assign stageReg_6_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_6_multiplicand
  assign stageReg_6_multiplicand$D_IN =
	     { stageReg_5_multiplicand[30:0], 1'd0 } ;
  assign stageReg_6_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_6_multiplier
  assign stageReg_6_multiplier$D_IN = { 1'd0, stageReg_5_multiplier[15:1] } ;
  assign stageReg_6_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_6_outSum
  assign stageReg_6_outSum$D_IN =
	     stageReg_5_multiplier[0] ?
	       stageReg_5_outSum + stageReg_5_multiplicand :
	       stageReg_5_outSum ;
  assign stageReg_6_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_7_garbage
  assign stageReg_7_garbage$D_IN = stageReg_6_garbage ;
  assign stageReg_7_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_7_multiplicand
  assign stageReg_7_multiplicand$D_IN =
	     { stageReg_6_multiplicand[30:0], 1'd0 } ;
  assign stageReg_7_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_7_multiplier
  assign stageReg_7_multiplier$D_IN = { 1'd0, stageReg_6_multiplier[15:1] } ;
  assign stageReg_7_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_7_outSum
  assign stageReg_7_outSum$D_IN =
	     stageReg_6_multiplier[0] ?
	       stageReg_6_outSum + stageReg_6_multiplicand :
	       stageReg_6_outSum ;
  assign stageReg_7_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_8_garbage
  assign stageReg_8_garbage$D_IN = stageReg_7_garbage ;
  assign stageReg_8_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_8_multiplicand
  assign stageReg_8_multiplicand$D_IN =
	     { stageReg_7_multiplicand[30:0], 1'd0 } ;
  assign stageReg_8_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_8_multiplier
  assign stageReg_8_multiplier$D_IN = { 1'd0, stageReg_7_multiplier[15:1] } ;
  assign stageReg_8_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_8_outSum
  assign stageReg_8_outSum$D_IN =
	     stageReg_7_multiplier[0] ?
	       stageReg_7_outSum + stageReg_7_multiplicand :
	       stageReg_7_outSum ;
  assign stageReg_8_outSum$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_9_garbage
  assign stageReg_9_garbage$D_IN = stageReg_8_garbage ;
  assign stageReg_9_garbage$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_9_multiplicand
  assign stageReg_9_multiplicand$D_IN =
	     { stageReg_8_multiplicand[30:0], 1'd0 } ;
  assign stageReg_9_multiplicand$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_9_multiplier
  assign stageReg_9_multiplier$D_IN = { 1'd0, stageReg_8_multiplier[15:1] } ;
  assign stageReg_9_multiplier$EN = CAN_FIRE_RL_cycle ;

  // register stageReg_9_outSum
  assign stageReg_9_outSum$D_IN =
	     stageReg_8_multiplier[0] ?
	       stageReg_8_outSum + stageReg_8_multiplicand :
	       stageReg_8_outSum ;
  assign stageReg_9_outSum$EN = CAN_FIRE_RL_cycle ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        available <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputReg_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputReg_outSum <= `BSV_ASSIGNMENT_DELAY 32'd0;
	outReg_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_0_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_10_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_11_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_12_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_13_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_14_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_15_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_16_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_1_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_2_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_3_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_4_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_5_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_6_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_7_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_8_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
	stageReg_9_garbage <= `BSV_ASSIGNMENT_DELAY 1'd1;
      end
    else
      begin
        if (available$EN) available <= `BSV_ASSIGNMENT_DELAY available$D_IN;
	if (inputReg_garbage$EN)
	  inputReg_garbage <= `BSV_ASSIGNMENT_DELAY inputReg_garbage$D_IN;
	if (inputReg_outSum$EN)
	  inputReg_outSum <= `BSV_ASSIGNMENT_DELAY inputReg_outSum$D_IN;
	if (outReg_garbage$EN)
	  outReg_garbage <= `BSV_ASSIGNMENT_DELAY outReg_garbage$D_IN;
	if (stageReg_0_garbage$EN)
	  stageReg_0_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_0_garbage$D_IN;
	if (stageReg_10_garbage$EN)
	  stageReg_10_garbage <= `BSV_ASSIGNMENT_DELAY
	      stageReg_10_garbage$D_IN;
	if (stageReg_11_garbage$EN)
	  stageReg_11_garbage <= `BSV_ASSIGNMENT_DELAY
	      stageReg_11_garbage$D_IN;
	if (stageReg_12_garbage$EN)
	  stageReg_12_garbage <= `BSV_ASSIGNMENT_DELAY
	      stageReg_12_garbage$D_IN;
	if (stageReg_13_garbage$EN)
	  stageReg_13_garbage <= `BSV_ASSIGNMENT_DELAY
	      stageReg_13_garbage$D_IN;
	if (stageReg_14_garbage$EN)
	  stageReg_14_garbage <= `BSV_ASSIGNMENT_DELAY
	      stageReg_14_garbage$D_IN;
	if (stageReg_15_garbage$EN)
	  stageReg_15_garbage <= `BSV_ASSIGNMENT_DELAY
	      stageReg_15_garbage$D_IN;
	if (stageReg_16_garbage$EN)
	  stageReg_16_garbage <= `BSV_ASSIGNMENT_DELAY
	      stageReg_16_garbage$D_IN;
	if (stageReg_1_garbage$EN)
	  stageReg_1_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_1_garbage$D_IN;
	if (stageReg_2_garbage$EN)
	  stageReg_2_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_2_garbage$D_IN;
	if (stageReg_3_garbage$EN)
	  stageReg_3_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_3_garbage$D_IN;
	if (stageReg_4_garbage$EN)
	  stageReg_4_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_4_garbage$D_IN;
	if (stageReg_5_garbage$EN)
	  stageReg_5_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_5_garbage$D_IN;
	if (stageReg_6_garbage$EN)
	  stageReg_6_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_6_garbage$D_IN;
	if (stageReg_7_garbage$EN)
	  stageReg_7_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_7_garbage$D_IN;
	if (stageReg_8_garbage$EN)
	  stageReg_8_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_8_garbage$D_IN;
	if (stageReg_9_garbage$EN)
	  stageReg_9_garbage <= `BSV_ASSIGNMENT_DELAY stageReg_9_garbage$D_IN;
      end
    if (inputReg_multiplicand$EN)
      inputReg_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  inputReg_multiplicand$D_IN;
    if (inputReg_multiplier$EN)
      inputReg_multiplier <= `BSV_ASSIGNMENT_DELAY inputReg_multiplier$D_IN;
    if (outReg_multiplicand$EN)
      outReg_multiplicand <= `BSV_ASSIGNMENT_DELAY outReg_multiplicand$D_IN;
    if (outReg_multiplier$EN)
      outReg_multiplier <= `BSV_ASSIGNMENT_DELAY outReg_multiplier$D_IN;
    if (outReg_outSum$EN)
      outReg_outSum <= `BSV_ASSIGNMENT_DELAY outReg_outSum$D_IN;
    if (stageReg_0_multiplicand$EN)
      stageReg_0_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_0_multiplicand$D_IN;
    if (stageReg_0_multiplier$EN)
      stageReg_0_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_0_multiplier$D_IN;
    if (stageReg_0_outSum$EN)
      stageReg_0_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_0_outSum$D_IN;
    if (stageReg_10_multiplicand$EN)
      stageReg_10_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_10_multiplicand$D_IN;
    if (stageReg_10_multiplier$EN)
      stageReg_10_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_10_multiplier$D_IN;
    if (stageReg_10_outSum$EN)
      stageReg_10_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_10_outSum$D_IN;
    if (stageReg_11_multiplicand$EN)
      stageReg_11_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_11_multiplicand$D_IN;
    if (stageReg_11_multiplier$EN)
      stageReg_11_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_11_multiplier$D_IN;
    if (stageReg_11_outSum$EN)
      stageReg_11_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_11_outSum$D_IN;
    if (stageReg_12_multiplicand$EN)
      stageReg_12_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_12_multiplicand$D_IN;
    if (stageReg_12_multiplier$EN)
      stageReg_12_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_12_multiplier$D_IN;
    if (stageReg_12_outSum$EN)
      stageReg_12_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_12_outSum$D_IN;
    if (stageReg_13_multiplicand$EN)
      stageReg_13_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_13_multiplicand$D_IN;
    if (stageReg_13_multiplier$EN)
      stageReg_13_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_13_multiplier$D_IN;
    if (stageReg_13_outSum$EN)
      stageReg_13_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_13_outSum$D_IN;
    if (stageReg_14_multiplicand$EN)
      stageReg_14_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_14_multiplicand$D_IN;
    if (stageReg_14_multiplier$EN)
      stageReg_14_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_14_multiplier$D_IN;
    if (stageReg_14_outSum$EN)
      stageReg_14_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_14_outSum$D_IN;
    if (stageReg_15_multiplicand$EN)
      stageReg_15_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_15_multiplicand$D_IN;
    if (stageReg_15_multiplier$EN)
      stageReg_15_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_15_multiplier$D_IN;
    if (stageReg_15_outSum$EN)
      stageReg_15_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_15_outSum$D_IN;
    if (stageReg_16_multiplicand$EN)
      stageReg_16_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_16_multiplicand$D_IN;
    if (stageReg_16_multiplier$EN)
      stageReg_16_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_16_multiplier$D_IN;
    if (stageReg_16_outSum$EN)
      stageReg_16_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_16_outSum$D_IN;
    if (stageReg_1_multiplicand$EN)
      stageReg_1_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_1_multiplicand$D_IN;
    if (stageReg_1_multiplier$EN)
      stageReg_1_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_1_multiplier$D_IN;
    if (stageReg_1_outSum$EN)
      stageReg_1_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_1_outSum$D_IN;
    if (stageReg_2_multiplicand$EN)
      stageReg_2_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_2_multiplicand$D_IN;
    if (stageReg_2_multiplier$EN)
      stageReg_2_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_2_multiplier$D_IN;
    if (stageReg_2_outSum$EN)
      stageReg_2_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_2_outSum$D_IN;
    if (stageReg_3_multiplicand$EN)
      stageReg_3_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_3_multiplicand$D_IN;
    if (stageReg_3_multiplier$EN)
      stageReg_3_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_3_multiplier$D_IN;
    if (stageReg_3_outSum$EN)
      stageReg_3_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_3_outSum$D_IN;
    if (stageReg_4_multiplicand$EN)
      stageReg_4_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_4_multiplicand$D_IN;
    if (stageReg_4_multiplier$EN)
      stageReg_4_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_4_multiplier$D_IN;
    if (stageReg_4_outSum$EN)
      stageReg_4_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_4_outSum$D_IN;
    if (stageReg_5_multiplicand$EN)
      stageReg_5_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_5_multiplicand$D_IN;
    if (stageReg_5_multiplier$EN)
      stageReg_5_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_5_multiplier$D_IN;
    if (stageReg_5_outSum$EN)
      stageReg_5_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_5_outSum$D_IN;
    if (stageReg_6_multiplicand$EN)
      stageReg_6_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_6_multiplicand$D_IN;
    if (stageReg_6_multiplier$EN)
      stageReg_6_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_6_multiplier$D_IN;
    if (stageReg_6_outSum$EN)
      stageReg_6_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_6_outSum$D_IN;
    if (stageReg_7_multiplicand$EN)
      stageReg_7_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_7_multiplicand$D_IN;
    if (stageReg_7_multiplier$EN)
      stageReg_7_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_7_multiplier$D_IN;
    if (stageReg_7_outSum$EN)
      stageReg_7_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_7_outSum$D_IN;
    if (stageReg_8_multiplicand$EN)
      stageReg_8_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_8_multiplicand$D_IN;
    if (stageReg_8_multiplier$EN)
      stageReg_8_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_8_multiplier$D_IN;
    if (stageReg_8_outSum$EN)
      stageReg_8_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_8_outSum$D_IN;
    if (stageReg_9_multiplicand$EN)
      stageReg_9_multiplicand <= `BSV_ASSIGNMENT_DELAY
	  stageReg_9_multiplicand$D_IN;
    if (stageReg_9_multiplier$EN)
      stageReg_9_multiplier <= `BSV_ASSIGNMENT_DELAY
	  stageReg_9_multiplier$D_IN;
    if (stageReg_9_outSum$EN)
      stageReg_9_outSum <= `BSV_ASSIGNMENT_DELAY stageReg_9_outSum$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    available = 1'h0;
    inputReg_garbage = 1'h0;
    inputReg_multiplicand = 32'hAAAAAAAA;
    inputReg_multiplier = 16'hAAAA;
    inputReg_outSum = 32'hAAAAAAAA;
    outReg_garbage = 1'h0;
    outReg_multiplicand = 32'hAAAAAAAA;
    outReg_multiplier = 16'hAAAA;
    outReg_outSum = 32'hAAAAAAAA;
    stageReg_0_garbage = 1'h0;
    stageReg_0_multiplicand = 32'hAAAAAAAA;
    stageReg_0_multiplier = 16'hAAAA;
    stageReg_0_outSum = 32'hAAAAAAAA;
    stageReg_10_garbage = 1'h0;
    stageReg_10_multiplicand = 32'hAAAAAAAA;
    stageReg_10_multiplier = 16'hAAAA;
    stageReg_10_outSum = 32'hAAAAAAAA;
    stageReg_11_garbage = 1'h0;
    stageReg_11_multiplicand = 32'hAAAAAAAA;
    stageReg_11_multiplier = 16'hAAAA;
    stageReg_11_outSum = 32'hAAAAAAAA;
    stageReg_12_garbage = 1'h0;
    stageReg_12_multiplicand = 32'hAAAAAAAA;
    stageReg_12_multiplier = 16'hAAAA;
    stageReg_12_outSum = 32'hAAAAAAAA;
    stageReg_13_garbage = 1'h0;
    stageReg_13_multiplicand = 32'hAAAAAAAA;
    stageReg_13_multiplier = 16'hAAAA;
    stageReg_13_outSum = 32'hAAAAAAAA;
    stageReg_14_garbage = 1'h0;
    stageReg_14_multiplicand = 32'hAAAAAAAA;
    stageReg_14_multiplier = 16'hAAAA;
    stageReg_14_outSum = 32'hAAAAAAAA;
    stageReg_15_garbage = 1'h0;
    stageReg_15_multiplicand = 32'hAAAAAAAA;
    stageReg_15_multiplier = 16'hAAAA;
    stageReg_15_outSum = 32'hAAAAAAAA;
    stageReg_16_garbage = 1'h0;
    stageReg_16_multiplicand = 32'hAAAAAAAA;
    stageReg_16_multiplier = 16'hAAAA;
    stageReg_16_outSum = 32'hAAAAAAAA;
    stageReg_1_garbage = 1'h0;
    stageReg_1_multiplicand = 32'hAAAAAAAA;
    stageReg_1_multiplier = 16'hAAAA;
    stageReg_1_outSum = 32'hAAAAAAAA;
    stageReg_2_garbage = 1'h0;
    stageReg_2_multiplicand = 32'hAAAAAAAA;
    stageReg_2_multiplier = 16'hAAAA;
    stageReg_2_outSum = 32'hAAAAAAAA;
    stageReg_3_garbage = 1'h0;
    stageReg_3_multiplicand = 32'hAAAAAAAA;
    stageReg_3_multiplier = 16'hAAAA;
    stageReg_3_outSum = 32'hAAAAAAAA;
    stageReg_4_garbage = 1'h0;
    stageReg_4_multiplicand = 32'hAAAAAAAA;
    stageReg_4_multiplier = 16'hAAAA;
    stageReg_4_outSum = 32'hAAAAAAAA;
    stageReg_5_garbage = 1'h0;
    stageReg_5_multiplicand = 32'hAAAAAAAA;
    stageReg_5_multiplier = 16'hAAAA;
    stageReg_5_outSum = 32'hAAAAAAAA;
    stageReg_6_garbage = 1'h0;
    stageReg_6_multiplicand = 32'hAAAAAAAA;
    stageReg_6_multiplier = 16'hAAAA;
    stageReg_6_outSum = 32'hAAAAAAAA;
    stageReg_7_garbage = 1'h0;
    stageReg_7_multiplicand = 32'hAAAAAAAA;
    stageReg_7_multiplier = 16'hAAAA;
    stageReg_7_outSum = 32'hAAAAAAAA;
    stageReg_8_garbage = 1'h0;
    stageReg_8_multiplicand = 32'hAAAAAAAA;
    stageReg_8_multiplier = 16'hAAAA;
    stageReg_8_outSum = 32'hAAAAAAAA;
    stageReg_9_garbage = 1'h0;
    stageReg_9_multiplicand = 32'hAAAAAAAA;
    stageReg_9_multiplier = 16'hAAAA;
    stageReg_9_outSum = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkPipeInelastic

