//
// Generated by Bluespec Compiler, version 2016.07.beta1 (build 34806, 2016-07-05)
//
// On Wed Dec  5 17:57:48 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_start                      O     1 const
// result                         O    32 reg
// RDY_result                     O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// start_m1                       I    16 reg
// start_m2                       I    16 reg
// EN_start                       I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkInelasticPipe(CLK,
		       RST_N,

		       start_m1,
		       start_m2,
		       EN_start,
		       RDY_start,

		       result,
		       RDY_result);
  input  CLK;
  input  RST_N;

  // action method start
  input  [15 : 0] start_m1;
  input  [15 : 0] start_m2;
  input  EN_start;
  output RDY_start;

  // value method result
  output [31 : 0] result;
  output RDY_result;

  // signals for module outputs
  wire [31 : 0] result;
  wire RDY_result, RDY_start;

  // register done
  reg done;
  wire done$D_IN, done$EN;

  // register inputReg_intmc
  reg [31 : 0] inputReg_intmc;
  wire [31 : 0] inputReg_intmc$D_IN;
  wire inputReg_intmc$EN;

  // register inputReg_intmp
  reg [15 : 0] inputReg_intmp;
  wire [15 : 0] inputReg_intmp$D_IN;
  wire inputReg_intmp$EN;

  // register inputReg_stsum
  reg [31 : 0] inputReg_stsum;
  wire [31 : 0] inputReg_stsum$D_IN;
  wire inputReg_stsum$EN;

  // register inputReg_valid
  reg inputReg_valid;
  wire inputReg_valid$D_IN, inputReg_valid$EN;

  // register outReg_intmc
  reg [31 : 0] outReg_intmc;
  wire [31 : 0] outReg_intmc$D_IN;
  wire outReg_intmc$EN;

  // register outReg_intmp
  reg [15 : 0] outReg_intmp;
  wire [15 : 0] outReg_intmp$D_IN;
  wire outReg_intmp$EN;

  // register outReg_stsum
  reg [31 : 0] outReg_stsum;
  wire [31 : 0] outReg_stsum$D_IN;
  wire outReg_stsum$EN;

  // register outReg_valid
  reg outReg_valid;
  wire outReg_valid$D_IN, outReg_valid$EN;

  // register stageReg_0_intmc
  reg [31 : 0] stageReg_0_intmc;
  wire [31 : 0] stageReg_0_intmc$D_IN;
  wire stageReg_0_intmc$EN;

  // register stageReg_0_intmp
  reg [15 : 0] stageReg_0_intmp;
  wire [15 : 0] stageReg_0_intmp$D_IN;
  wire stageReg_0_intmp$EN;

  // register stageReg_0_stsum
  reg [31 : 0] stageReg_0_stsum;
  wire [31 : 0] stageReg_0_stsum$D_IN;
  wire stageReg_0_stsum$EN;

  // register stageReg_0_valid
  reg stageReg_0_valid;
  wire stageReg_0_valid$D_IN, stageReg_0_valid$EN;

  // register stageReg_10_intmc
  reg [31 : 0] stageReg_10_intmc;
  wire [31 : 0] stageReg_10_intmc$D_IN;
  wire stageReg_10_intmc$EN;

  // register stageReg_10_intmp
  reg [15 : 0] stageReg_10_intmp;
  wire [15 : 0] stageReg_10_intmp$D_IN;
  wire stageReg_10_intmp$EN;

  // register stageReg_10_stsum
  reg [31 : 0] stageReg_10_stsum;
  wire [31 : 0] stageReg_10_stsum$D_IN;
  wire stageReg_10_stsum$EN;

  // register stageReg_10_valid
  reg stageReg_10_valid;
  wire stageReg_10_valid$D_IN, stageReg_10_valid$EN;

  // register stageReg_11_intmc
  reg [31 : 0] stageReg_11_intmc;
  wire [31 : 0] stageReg_11_intmc$D_IN;
  wire stageReg_11_intmc$EN;

  // register stageReg_11_intmp
  reg [15 : 0] stageReg_11_intmp;
  wire [15 : 0] stageReg_11_intmp$D_IN;
  wire stageReg_11_intmp$EN;

  // register stageReg_11_stsum
  reg [31 : 0] stageReg_11_stsum;
  wire [31 : 0] stageReg_11_stsum$D_IN;
  wire stageReg_11_stsum$EN;

  // register stageReg_11_valid
  reg stageReg_11_valid;
  wire stageReg_11_valid$D_IN, stageReg_11_valid$EN;

  // register stageReg_12_intmc
  reg [31 : 0] stageReg_12_intmc;
  wire [31 : 0] stageReg_12_intmc$D_IN;
  wire stageReg_12_intmc$EN;

  // register stageReg_12_intmp
  reg [15 : 0] stageReg_12_intmp;
  wire [15 : 0] stageReg_12_intmp$D_IN;
  wire stageReg_12_intmp$EN;

  // register stageReg_12_stsum
  reg [31 : 0] stageReg_12_stsum;
  wire [31 : 0] stageReg_12_stsum$D_IN;
  wire stageReg_12_stsum$EN;

  // register stageReg_12_valid
  reg stageReg_12_valid;
  wire stageReg_12_valid$D_IN, stageReg_12_valid$EN;

  // register stageReg_13_intmc
  reg [31 : 0] stageReg_13_intmc;
  wire [31 : 0] stageReg_13_intmc$D_IN;
  wire stageReg_13_intmc$EN;

  // register stageReg_13_intmp
  reg [15 : 0] stageReg_13_intmp;
  wire [15 : 0] stageReg_13_intmp$D_IN;
  wire stageReg_13_intmp$EN;

  // register stageReg_13_stsum
  reg [31 : 0] stageReg_13_stsum;
  wire [31 : 0] stageReg_13_stsum$D_IN;
  wire stageReg_13_stsum$EN;

  // register stageReg_13_valid
  reg stageReg_13_valid;
  wire stageReg_13_valid$D_IN, stageReg_13_valid$EN;

  // register stageReg_14_intmc
  reg [31 : 0] stageReg_14_intmc;
  wire [31 : 0] stageReg_14_intmc$D_IN;
  wire stageReg_14_intmc$EN;

  // register stageReg_14_intmp
  reg [15 : 0] stageReg_14_intmp;
  wire [15 : 0] stageReg_14_intmp$D_IN;
  wire stageReg_14_intmp$EN;

  // register stageReg_14_stsum
  reg [31 : 0] stageReg_14_stsum;
  wire [31 : 0] stageReg_14_stsum$D_IN;
  wire stageReg_14_stsum$EN;

  // register stageReg_14_valid
  reg stageReg_14_valid;
  wire stageReg_14_valid$D_IN, stageReg_14_valid$EN;

  // register stageReg_15_intmc
  reg [31 : 0] stageReg_15_intmc;
  wire [31 : 0] stageReg_15_intmc$D_IN;
  wire stageReg_15_intmc$EN;

  // register stageReg_15_intmp
  reg [15 : 0] stageReg_15_intmp;
  wire [15 : 0] stageReg_15_intmp$D_IN;
  wire stageReg_15_intmp$EN;

  // register stageReg_15_stsum
  reg [31 : 0] stageReg_15_stsum;
  wire [31 : 0] stageReg_15_stsum$D_IN;
  wire stageReg_15_stsum$EN;

  // register stageReg_15_valid
  reg stageReg_15_valid;
  wire stageReg_15_valid$D_IN, stageReg_15_valid$EN;

  // register stageReg_16_intmc
  reg [31 : 0] stageReg_16_intmc;
  wire [31 : 0] stageReg_16_intmc$D_IN;
  wire stageReg_16_intmc$EN;

  // register stageReg_16_intmp
  reg [15 : 0] stageReg_16_intmp;
  wire [15 : 0] stageReg_16_intmp$D_IN;
  wire stageReg_16_intmp$EN;

  // register stageReg_16_stsum
  reg [31 : 0] stageReg_16_stsum;
  wire [31 : 0] stageReg_16_stsum$D_IN;
  wire stageReg_16_stsum$EN;

  // register stageReg_16_valid
  reg stageReg_16_valid;
  wire stageReg_16_valid$D_IN, stageReg_16_valid$EN;

  // register stageReg_1_intmc
  reg [31 : 0] stageReg_1_intmc;
  wire [31 : 0] stageReg_1_intmc$D_IN;
  wire stageReg_1_intmc$EN;

  // register stageReg_1_intmp
  reg [15 : 0] stageReg_1_intmp;
  wire [15 : 0] stageReg_1_intmp$D_IN;
  wire stageReg_1_intmp$EN;

  // register stageReg_1_stsum
  reg [31 : 0] stageReg_1_stsum;
  wire [31 : 0] stageReg_1_stsum$D_IN;
  wire stageReg_1_stsum$EN;

  // register stageReg_1_valid
  reg stageReg_1_valid;
  wire stageReg_1_valid$D_IN, stageReg_1_valid$EN;

  // register stageReg_2_intmc
  reg [31 : 0] stageReg_2_intmc;
  wire [31 : 0] stageReg_2_intmc$D_IN;
  wire stageReg_2_intmc$EN;

  // register stageReg_2_intmp
  reg [15 : 0] stageReg_2_intmp;
  wire [15 : 0] stageReg_2_intmp$D_IN;
  wire stageReg_2_intmp$EN;

  // register stageReg_2_stsum
  reg [31 : 0] stageReg_2_stsum;
  wire [31 : 0] stageReg_2_stsum$D_IN;
  wire stageReg_2_stsum$EN;

  // register stageReg_2_valid
  reg stageReg_2_valid;
  wire stageReg_2_valid$D_IN, stageReg_2_valid$EN;

  // register stageReg_3_intmc
  reg [31 : 0] stageReg_3_intmc;
  wire [31 : 0] stageReg_3_intmc$D_IN;
  wire stageReg_3_intmc$EN;

  // register stageReg_3_intmp
  reg [15 : 0] stageReg_3_intmp;
  wire [15 : 0] stageReg_3_intmp$D_IN;
  wire stageReg_3_intmp$EN;

  // register stageReg_3_stsum
  reg [31 : 0] stageReg_3_stsum;
  wire [31 : 0] stageReg_3_stsum$D_IN;
  wire stageReg_3_stsum$EN;

  // register stageReg_3_valid
  reg stageReg_3_valid;
  wire stageReg_3_valid$D_IN, stageReg_3_valid$EN;

  // register stageReg_4_intmc
  reg [31 : 0] stageReg_4_intmc;
  wire [31 : 0] stageReg_4_intmc$D_IN;
  wire stageReg_4_intmc$EN;

  // register stageReg_4_intmp
  reg [15 : 0] stageReg_4_intmp;
  wire [15 : 0] stageReg_4_intmp$D_IN;
  wire stageReg_4_intmp$EN;

  // register stageReg_4_stsum
  reg [31 : 0] stageReg_4_stsum;
  wire [31 : 0] stageReg_4_stsum$D_IN;
  wire stageReg_4_stsum$EN;

  // register stageReg_4_valid
  reg stageReg_4_valid;
  wire stageReg_4_valid$D_IN, stageReg_4_valid$EN;

  // register stageReg_5_intmc
  reg [31 : 0] stageReg_5_intmc;
  wire [31 : 0] stageReg_5_intmc$D_IN;
  wire stageReg_5_intmc$EN;

  // register stageReg_5_intmp
  reg [15 : 0] stageReg_5_intmp;
  wire [15 : 0] stageReg_5_intmp$D_IN;
  wire stageReg_5_intmp$EN;

  // register stageReg_5_stsum
  reg [31 : 0] stageReg_5_stsum;
  wire [31 : 0] stageReg_5_stsum$D_IN;
  wire stageReg_5_stsum$EN;

  // register stageReg_5_valid
  reg stageReg_5_valid;
  wire stageReg_5_valid$D_IN, stageReg_5_valid$EN;

  // register stageReg_6_intmc
  reg [31 : 0] stageReg_6_intmc;
  wire [31 : 0] stageReg_6_intmc$D_IN;
  wire stageReg_6_intmc$EN;

  // register stageReg_6_intmp
  reg [15 : 0] stageReg_6_intmp;
  wire [15 : 0] stageReg_6_intmp$D_IN;
  wire stageReg_6_intmp$EN;

  // register stageReg_6_stsum
  reg [31 : 0] stageReg_6_stsum;
  wire [31 : 0] stageReg_6_stsum$D_IN;
  wire stageReg_6_stsum$EN;

  // register stageReg_6_valid
  reg stageReg_6_valid;
  wire stageReg_6_valid$D_IN, stageReg_6_valid$EN;

  // register stageReg_7_intmc
  reg [31 : 0] stageReg_7_intmc;
  wire [31 : 0] stageReg_7_intmc$D_IN;
  wire stageReg_7_intmc$EN;

  // register stageReg_7_intmp
  reg [15 : 0] stageReg_7_intmp;
  wire [15 : 0] stageReg_7_intmp$D_IN;
  wire stageReg_7_intmp$EN;

  // register stageReg_7_stsum
  reg [31 : 0] stageReg_7_stsum;
  wire [31 : 0] stageReg_7_stsum$D_IN;
  wire stageReg_7_stsum$EN;

  // register stageReg_7_valid
  reg stageReg_7_valid;
  wire stageReg_7_valid$D_IN, stageReg_7_valid$EN;

  // register stageReg_8_intmc
  reg [31 : 0] stageReg_8_intmc;
  wire [31 : 0] stageReg_8_intmc$D_IN;
  wire stageReg_8_intmc$EN;

  // register stageReg_8_intmp
  reg [15 : 0] stageReg_8_intmp;
  wire [15 : 0] stageReg_8_intmp$D_IN;
  wire stageReg_8_intmp$EN;

  // register stageReg_8_stsum
  reg [31 : 0] stageReg_8_stsum;
  wire [31 : 0] stageReg_8_stsum$D_IN;
  wire stageReg_8_stsum$EN;

  // register stageReg_8_valid
  reg stageReg_8_valid;
  wire stageReg_8_valid$D_IN, stageReg_8_valid$EN;

  // register stageReg_9_intmc
  reg [31 : 0] stageReg_9_intmc;
  wire [31 : 0] stageReg_9_intmc$D_IN;
  wire stageReg_9_intmc$EN;

  // register stageReg_9_intmp
  reg [15 : 0] stageReg_9_intmp;
  wire [15 : 0] stageReg_9_intmp$D_IN;
  wire stageReg_9_intmp$EN;

  // register stageReg_9_stsum
  reg [31 : 0] stageReg_9_stsum;
  wire [31 : 0] stageReg_9_stsum$D_IN;
  wire stageReg_9_stsum$EN;

  // register stageReg_9_valid
  reg stageReg_9_valid;
  wire stageReg_9_valid$D_IN, stageReg_9_valid$EN;

  // rule scheduling signals
  wire CAN_FIRE_RL_cycle, CAN_FIRE_start, WILL_FIRE_RL_cycle, WILL_FIRE_start;

  // action method start
  assign RDY_start = 1'd1 ;
  assign CAN_FIRE_start = 1'd1 ;
  assign WILL_FIRE_start = EN_start ;

  // value method result
  assign result = stageReg_16_stsum ;
  assign RDY_result = stageReg_16_valid ;

  // rule RL_cycle
  assign CAN_FIRE_RL_cycle = stageReg_0_valid ;
  assign WILL_FIRE_RL_cycle = stageReg_0_valid ;

  // register done
  assign done$D_IN = !EN_start ;
  assign done$EN = EN_start || stageReg_0_valid ;

  // register inputReg_intmc
  assign inputReg_intmc$D_IN = 32'h0 ;
  assign inputReg_intmc$EN = 1'b0 ;

  // register inputReg_intmp
  assign inputReg_intmp$D_IN = 16'h0 ;
  assign inputReg_intmp$EN = 1'b0 ;

  // register inputReg_stsum
  assign inputReg_stsum$D_IN = 32'h0 ;
  assign inputReg_stsum$EN = 1'b0 ;

  // register inputReg_valid
  assign inputReg_valid$D_IN = 1'b0 ;
  assign inputReg_valid$EN = 1'b0 ;

  // register outReg_intmc
  assign outReg_intmc$D_IN = 32'h0 ;
  assign outReg_intmc$EN = 1'b0 ;

  // register outReg_intmp
  assign outReg_intmp$D_IN = 16'h0 ;
  assign outReg_intmp$EN = 1'b0 ;

  // register outReg_stsum
  assign outReg_stsum$D_IN = 32'h0 ;
  assign outReg_stsum$EN = 1'b0 ;

  // register outReg_valid
  assign outReg_valid$D_IN = 1'b0 ;
  assign outReg_valid$EN = 1'b0 ;

  // register stageReg_0_intmc
  assign stageReg_0_intmc$D_IN = { 16'd0, start_m1 } ;
  assign stageReg_0_intmc$EN = EN_start ;

  // register stageReg_0_intmp
  assign stageReg_0_intmp$D_IN = start_m2 ;
  assign stageReg_0_intmp$EN = EN_start ;

  // register stageReg_0_stsum
  assign stageReg_0_stsum$D_IN = 32'd0 ;
  assign stageReg_0_stsum$EN = EN_start ;

  // register stageReg_0_valid
  assign stageReg_0_valid$D_IN = EN_start ;
  assign stageReg_0_valid$EN = stageReg_0_valid || EN_start ;

  // register stageReg_10_intmc
  assign stageReg_10_intmc$D_IN = { stageReg_9_intmc[30:0], 1'd0 } ;
  assign stageReg_10_intmc$EN = stageReg_0_valid ;

  // register stageReg_10_intmp
  assign stageReg_10_intmp$D_IN = { 1'd0, stageReg_9_intmp[15:1] } ;
  assign stageReg_10_intmp$EN = stageReg_0_valid ;

  // register stageReg_10_stsum
  assign stageReg_10_stsum$D_IN =
	     stageReg_9_intmp[0] ?
	       stageReg_9_stsum + stageReg_9_intmc :
	       stageReg_9_stsum ;
  assign stageReg_10_stsum$EN = stageReg_0_valid ;

  // register stageReg_10_valid
  assign stageReg_10_valid$D_IN = stageReg_9_valid ;
  assign stageReg_10_valid$EN = stageReg_0_valid ;

  // register stageReg_11_intmc
  assign stageReg_11_intmc$D_IN = { stageReg_10_intmc[30:0], 1'd0 } ;
  assign stageReg_11_intmc$EN = stageReg_0_valid ;

  // register stageReg_11_intmp
  assign stageReg_11_intmp$D_IN = { 1'd0, stageReg_10_intmp[15:1] } ;
  assign stageReg_11_intmp$EN = stageReg_0_valid ;

  // register stageReg_11_stsum
  assign stageReg_11_stsum$D_IN =
	     stageReg_10_intmp[0] ?
	       stageReg_10_stsum + stageReg_10_intmc :
	       stageReg_10_stsum ;
  assign stageReg_11_stsum$EN = stageReg_0_valid ;

  // register stageReg_11_valid
  assign stageReg_11_valid$D_IN = stageReg_10_valid ;
  assign stageReg_11_valid$EN = stageReg_0_valid ;

  // register stageReg_12_intmc
  assign stageReg_12_intmc$D_IN = { stageReg_11_intmc[30:0], 1'd0 } ;
  assign stageReg_12_intmc$EN = stageReg_0_valid ;

  // register stageReg_12_intmp
  assign stageReg_12_intmp$D_IN = { 1'd0, stageReg_11_intmp[15:1] } ;
  assign stageReg_12_intmp$EN = stageReg_0_valid ;

  // register stageReg_12_stsum
  assign stageReg_12_stsum$D_IN =
	     stageReg_11_intmp[0] ?
	       stageReg_11_stsum + stageReg_11_intmc :
	       stageReg_11_stsum ;
  assign stageReg_12_stsum$EN = stageReg_0_valid ;

  // register stageReg_12_valid
  assign stageReg_12_valid$D_IN = stageReg_11_valid ;
  assign stageReg_12_valid$EN = stageReg_0_valid ;

  // register stageReg_13_intmc
  assign stageReg_13_intmc$D_IN = { stageReg_12_intmc[30:0], 1'd0 } ;
  assign stageReg_13_intmc$EN = stageReg_0_valid ;

  // register stageReg_13_intmp
  assign stageReg_13_intmp$D_IN = { 1'd0, stageReg_12_intmp[15:1] } ;
  assign stageReg_13_intmp$EN = stageReg_0_valid ;

  // register stageReg_13_stsum
  assign stageReg_13_stsum$D_IN =
	     stageReg_12_intmp[0] ?
	       stageReg_12_stsum + stageReg_12_intmc :
	       stageReg_12_stsum ;
  assign stageReg_13_stsum$EN = stageReg_0_valid ;

  // register stageReg_13_valid
  assign stageReg_13_valid$D_IN = stageReg_12_valid ;
  assign stageReg_13_valid$EN = stageReg_0_valid ;

  // register stageReg_14_intmc
  assign stageReg_14_intmc$D_IN = { stageReg_13_intmc[30:0], 1'd0 } ;
  assign stageReg_14_intmc$EN = stageReg_0_valid ;

  // register stageReg_14_intmp
  assign stageReg_14_intmp$D_IN = { 1'd0, stageReg_13_intmp[15:1] } ;
  assign stageReg_14_intmp$EN = stageReg_0_valid ;

  // register stageReg_14_stsum
  assign stageReg_14_stsum$D_IN =
	     stageReg_13_intmp[0] ?
	       stageReg_13_stsum + stageReg_13_intmc :
	       stageReg_13_stsum ;
  assign stageReg_14_stsum$EN = stageReg_0_valid ;

  // register stageReg_14_valid
  assign stageReg_14_valid$D_IN = stageReg_13_valid ;
  assign stageReg_14_valid$EN = stageReg_0_valid ;

  // register stageReg_15_intmc
  assign stageReg_15_intmc$D_IN = { stageReg_14_intmc[30:0], 1'd0 } ;
  assign stageReg_15_intmc$EN = stageReg_0_valid ;

  // register stageReg_15_intmp
  assign stageReg_15_intmp$D_IN = { 1'd0, stageReg_14_intmp[15:1] } ;
  assign stageReg_15_intmp$EN = stageReg_0_valid ;

  // register stageReg_15_stsum
  assign stageReg_15_stsum$D_IN =
	     stageReg_14_intmp[0] ?
	       stageReg_14_stsum + stageReg_14_intmc :
	       stageReg_14_stsum ;
  assign stageReg_15_stsum$EN = stageReg_0_valid ;

  // register stageReg_15_valid
  assign stageReg_15_valid$D_IN = stageReg_14_valid ;
  assign stageReg_15_valid$EN = stageReg_0_valid ;

  // register stageReg_16_intmc
  assign stageReg_16_intmc$D_IN = { stageReg_15_intmc[30:0], 1'd0 } ;
  assign stageReg_16_intmc$EN = stageReg_0_valid ;

  // register stageReg_16_intmp
  assign stageReg_16_intmp$D_IN = { 1'd0, stageReg_15_intmp[15:1] } ;
  assign stageReg_16_intmp$EN = stageReg_0_valid ;

  // register stageReg_16_stsum
  assign stageReg_16_stsum$D_IN =
	     stageReg_15_intmp[0] ?
	       stageReg_15_stsum + stageReg_15_intmc :
	       stageReg_15_stsum ;
  assign stageReg_16_stsum$EN = stageReg_0_valid ;

  // register stageReg_16_valid
  assign stageReg_16_valid$D_IN = stageReg_15_valid ;
  assign stageReg_16_valid$EN = stageReg_0_valid ;

  // register stageReg_1_intmc
  assign stageReg_1_intmc$D_IN = { stageReg_0_intmc[30:0], 1'd0 } ;
  assign stageReg_1_intmc$EN = stageReg_0_valid ;

  // register stageReg_1_intmp
  assign stageReg_1_intmp$D_IN = { 1'd0, stageReg_0_intmp[15:1] } ;
  assign stageReg_1_intmp$EN = stageReg_0_valid ;

  // register stageReg_1_stsum
  assign stageReg_1_stsum$D_IN =
	     stageReg_0_intmp[0] ?
	       stageReg_0_stsum + stageReg_0_intmc :
	       stageReg_0_stsum ;
  assign stageReg_1_stsum$EN = stageReg_0_valid ;

  // register stageReg_1_valid
  assign stageReg_1_valid$D_IN = stageReg_0_valid ;
  assign stageReg_1_valid$EN = stageReg_0_valid ;

  // register stageReg_2_intmc
  assign stageReg_2_intmc$D_IN = { stageReg_1_intmc[30:0], 1'd0 } ;
  assign stageReg_2_intmc$EN = stageReg_0_valid ;

  // register stageReg_2_intmp
  assign stageReg_2_intmp$D_IN = { 1'd0, stageReg_1_intmp[15:1] } ;
  assign stageReg_2_intmp$EN = stageReg_0_valid ;

  // register stageReg_2_stsum
  assign stageReg_2_stsum$D_IN =
	     stageReg_1_intmp[0] ?
	       stageReg_1_stsum + stageReg_1_intmc :
	       stageReg_1_stsum ;
  assign stageReg_2_stsum$EN = stageReg_0_valid ;

  // register stageReg_2_valid
  assign stageReg_2_valid$D_IN = stageReg_1_valid ;
  assign stageReg_2_valid$EN = stageReg_0_valid ;

  // register stageReg_3_intmc
  assign stageReg_3_intmc$D_IN = { stageReg_2_intmc[30:0], 1'd0 } ;
  assign stageReg_3_intmc$EN = stageReg_0_valid ;

  // register stageReg_3_intmp
  assign stageReg_3_intmp$D_IN = { 1'd0, stageReg_2_intmp[15:1] } ;
  assign stageReg_3_intmp$EN = stageReg_0_valid ;

  // register stageReg_3_stsum
  assign stageReg_3_stsum$D_IN =
	     stageReg_2_intmp[0] ?
	       stageReg_2_stsum + stageReg_2_intmc :
	       stageReg_2_stsum ;
  assign stageReg_3_stsum$EN = stageReg_0_valid ;

  // register stageReg_3_valid
  assign stageReg_3_valid$D_IN = stageReg_2_valid ;
  assign stageReg_3_valid$EN = stageReg_0_valid ;

  // register stageReg_4_intmc
  assign stageReg_4_intmc$D_IN = { stageReg_3_intmc[30:0], 1'd0 } ;
  assign stageReg_4_intmc$EN = stageReg_0_valid ;

  // register stageReg_4_intmp
  assign stageReg_4_intmp$D_IN = { 1'd0, stageReg_3_intmp[15:1] } ;
  assign stageReg_4_intmp$EN = stageReg_0_valid ;

  // register stageReg_4_stsum
  assign stageReg_4_stsum$D_IN =
	     stageReg_3_intmp[0] ?
	       stageReg_3_stsum + stageReg_3_intmc :
	       stageReg_3_stsum ;
  assign stageReg_4_stsum$EN = stageReg_0_valid ;

  // register stageReg_4_valid
  assign stageReg_4_valid$D_IN = stageReg_3_valid ;
  assign stageReg_4_valid$EN = stageReg_0_valid ;

  // register stageReg_5_intmc
  assign stageReg_5_intmc$D_IN = { stageReg_4_intmc[30:0], 1'd0 } ;
  assign stageReg_5_intmc$EN = stageReg_0_valid ;

  // register stageReg_5_intmp
  assign stageReg_5_intmp$D_IN = { 1'd0, stageReg_4_intmp[15:1] } ;
  assign stageReg_5_intmp$EN = stageReg_0_valid ;

  // register stageReg_5_stsum
  assign stageReg_5_stsum$D_IN =
	     stageReg_4_intmp[0] ?
	       stageReg_4_stsum + stageReg_4_intmc :
	       stageReg_4_stsum ;
  assign stageReg_5_stsum$EN = stageReg_0_valid ;

  // register stageReg_5_valid
  assign stageReg_5_valid$D_IN = stageReg_4_valid ;
  assign stageReg_5_valid$EN = stageReg_0_valid ;

  // register stageReg_6_intmc
  assign stageReg_6_intmc$D_IN = { stageReg_5_intmc[30:0], 1'd0 } ;
  assign stageReg_6_intmc$EN = stageReg_0_valid ;

  // register stageReg_6_intmp
  assign stageReg_6_intmp$D_IN = { 1'd0, stageReg_5_intmp[15:1] } ;
  assign stageReg_6_intmp$EN = stageReg_0_valid ;

  // register stageReg_6_stsum
  assign stageReg_6_stsum$D_IN =
	     stageReg_5_intmp[0] ?
	       stageReg_5_stsum + stageReg_5_intmc :
	       stageReg_5_stsum ;
  assign stageReg_6_stsum$EN = stageReg_0_valid ;

  // register stageReg_6_valid
  assign stageReg_6_valid$D_IN = stageReg_5_valid ;
  assign stageReg_6_valid$EN = stageReg_0_valid ;

  // register stageReg_7_intmc
  assign stageReg_7_intmc$D_IN = { stageReg_6_intmc[30:0], 1'd0 } ;
  assign stageReg_7_intmc$EN = stageReg_0_valid ;

  // register stageReg_7_intmp
  assign stageReg_7_intmp$D_IN = { 1'd0, stageReg_6_intmp[15:1] } ;
  assign stageReg_7_intmp$EN = stageReg_0_valid ;

  // register stageReg_7_stsum
  assign stageReg_7_stsum$D_IN =
	     stageReg_6_intmp[0] ?
	       stageReg_6_stsum + stageReg_6_intmc :
	       stageReg_6_stsum ;
  assign stageReg_7_stsum$EN = stageReg_0_valid ;

  // register stageReg_7_valid
  assign stageReg_7_valid$D_IN = stageReg_6_valid ;
  assign stageReg_7_valid$EN = stageReg_0_valid ;

  // register stageReg_8_intmc
  assign stageReg_8_intmc$D_IN = { stageReg_7_intmc[30:0], 1'd0 } ;
  assign stageReg_8_intmc$EN = stageReg_0_valid ;

  // register stageReg_8_intmp
  assign stageReg_8_intmp$D_IN = { 1'd0, stageReg_7_intmp[15:1] } ;
  assign stageReg_8_intmp$EN = stageReg_0_valid ;

  // register stageReg_8_stsum
  assign stageReg_8_stsum$D_IN =
	     stageReg_7_intmp[0] ?
	       stageReg_7_stsum + stageReg_7_intmc :
	       stageReg_7_stsum ;
  assign stageReg_8_stsum$EN = stageReg_0_valid ;

  // register stageReg_8_valid
  assign stageReg_8_valid$D_IN = stageReg_7_valid ;
  assign stageReg_8_valid$EN = stageReg_0_valid ;

  // register stageReg_9_intmc
  assign stageReg_9_intmc$D_IN = { stageReg_8_intmc[30:0], 1'd0 } ;
  assign stageReg_9_intmc$EN = stageReg_0_valid ;

  // register stageReg_9_intmp
  assign stageReg_9_intmp$D_IN = { 1'd0, stageReg_8_intmp[15:1] } ;
  assign stageReg_9_intmp$EN = stageReg_0_valid ;

  // register stageReg_9_stsum
  assign stageReg_9_stsum$D_IN =
	     stageReg_8_intmp[0] ?
	       stageReg_8_stsum + stageReg_8_intmc :
	       stageReg_8_stsum ;
  assign stageReg_9_stsum$EN = stageReg_0_valid ;

  // register stageReg_9_valid
  assign stageReg_9_valid$D_IN = stageReg_8_valid ;
  assign stageReg_9_valid$EN = stageReg_0_valid ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        done <= `BSV_ASSIGNMENT_DELAY 1'd1;
	inputReg_stsum <= `BSV_ASSIGNMENT_DELAY 32'd0;
	inputReg_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	outReg_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_0_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_10_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_11_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_12_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_13_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_14_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_15_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_16_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_1_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_2_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_3_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_4_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_5_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_6_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_7_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_8_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stageReg_9_valid <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (done$EN) done <= `BSV_ASSIGNMENT_DELAY done$D_IN;
	if (inputReg_stsum$EN)
	  inputReg_stsum <= `BSV_ASSIGNMENT_DELAY inputReg_stsum$D_IN;
	if (inputReg_valid$EN)
	  inputReg_valid <= `BSV_ASSIGNMENT_DELAY inputReg_valid$D_IN;
	if (outReg_valid$EN)
	  outReg_valid <= `BSV_ASSIGNMENT_DELAY outReg_valid$D_IN;
	if (stageReg_0_valid$EN)
	  stageReg_0_valid <= `BSV_ASSIGNMENT_DELAY stageReg_0_valid$D_IN;
	if (stageReg_10_valid$EN)
	  stageReg_10_valid <= `BSV_ASSIGNMENT_DELAY stageReg_10_valid$D_IN;
	if (stageReg_11_valid$EN)
	  stageReg_11_valid <= `BSV_ASSIGNMENT_DELAY stageReg_11_valid$D_IN;
	if (stageReg_12_valid$EN)
	  stageReg_12_valid <= `BSV_ASSIGNMENT_DELAY stageReg_12_valid$D_IN;
	if (stageReg_13_valid$EN)
	  stageReg_13_valid <= `BSV_ASSIGNMENT_DELAY stageReg_13_valid$D_IN;
	if (stageReg_14_valid$EN)
	  stageReg_14_valid <= `BSV_ASSIGNMENT_DELAY stageReg_14_valid$D_IN;
	if (stageReg_15_valid$EN)
	  stageReg_15_valid <= `BSV_ASSIGNMENT_DELAY stageReg_15_valid$D_IN;
	if (stageReg_16_valid$EN)
	  stageReg_16_valid <= `BSV_ASSIGNMENT_DELAY stageReg_16_valid$D_IN;
	if (stageReg_1_valid$EN)
	  stageReg_1_valid <= `BSV_ASSIGNMENT_DELAY stageReg_1_valid$D_IN;
	if (stageReg_2_valid$EN)
	  stageReg_2_valid <= `BSV_ASSIGNMENT_DELAY stageReg_2_valid$D_IN;
	if (stageReg_3_valid$EN)
	  stageReg_3_valid <= `BSV_ASSIGNMENT_DELAY stageReg_3_valid$D_IN;
	if (stageReg_4_valid$EN)
	  stageReg_4_valid <= `BSV_ASSIGNMENT_DELAY stageReg_4_valid$D_IN;
	if (stageReg_5_valid$EN)
	  stageReg_5_valid <= `BSV_ASSIGNMENT_DELAY stageReg_5_valid$D_IN;
	if (stageReg_6_valid$EN)
	  stageReg_6_valid <= `BSV_ASSIGNMENT_DELAY stageReg_6_valid$D_IN;
	if (stageReg_7_valid$EN)
	  stageReg_7_valid <= `BSV_ASSIGNMENT_DELAY stageReg_7_valid$D_IN;
	if (stageReg_8_valid$EN)
	  stageReg_8_valid <= `BSV_ASSIGNMENT_DELAY stageReg_8_valid$D_IN;
	if (stageReg_9_valid$EN)
	  stageReg_9_valid <= `BSV_ASSIGNMENT_DELAY stageReg_9_valid$D_IN;
      end
    if (inputReg_intmc$EN)
      inputReg_intmc <= `BSV_ASSIGNMENT_DELAY inputReg_intmc$D_IN;
    if (inputReg_intmp$EN)
      inputReg_intmp <= `BSV_ASSIGNMENT_DELAY inputReg_intmp$D_IN;
    if (outReg_intmc$EN)
      outReg_intmc <= `BSV_ASSIGNMENT_DELAY outReg_intmc$D_IN;
    if (outReg_intmp$EN)
      outReg_intmp <= `BSV_ASSIGNMENT_DELAY outReg_intmp$D_IN;
    if (outReg_stsum$EN)
      outReg_stsum <= `BSV_ASSIGNMENT_DELAY outReg_stsum$D_IN;
    if (stageReg_0_intmc$EN)
      stageReg_0_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_0_intmc$D_IN;
    if (stageReg_0_intmp$EN)
      stageReg_0_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_0_intmp$D_IN;
    if (stageReg_0_stsum$EN)
      stageReg_0_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_0_stsum$D_IN;
    if (stageReg_10_intmc$EN)
      stageReg_10_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_10_intmc$D_IN;
    if (stageReg_10_intmp$EN)
      stageReg_10_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_10_intmp$D_IN;
    if (stageReg_10_stsum$EN)
      stageReg_10_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_10_stsum$D_IN;
    if (stageReg_11_intmc$EN)
      stageReg_11_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_11_intmc$D_IN;
    if (stageReg_11_intmp$EN)
      stageReg_11_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_11_intmp$D_IN;
    if (stageReg_11_stsum$EN)
      stageReg_11_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_11_stsum$D_IN;
    if (stageReg_12_intmc$EN)
      stageReg_12_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_12_intmc$D_IN;
    if (stageReg_12_intmp$EN)
      stageReg_12_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_12_intmp$D_IN;
    if (stageReg_12_stsum$EN)
      stageReg_12_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_12_stsum$D_IN;
    if (stageReg_13_intmc$EN)
      stageReg_13_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_13_intmc$D_IN;
    if (stageReg_13_intmp$EN)
      stageReg_13_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_13_intmp$D_IN;
    if (stageReg_13_stsum$EN)
      stageReg_13_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_13_stsum$D_IN;
    if (stageReg_14_intmc$EN)
      stageReg_14_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_14_intmc$D_IN;
    if (stageReg_14_intmp$EN)
      stageReg_14_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_14_intmp$D_IN;
    if (stageReg_14_stsum$EN)
      stageReg_14_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_14_stsum$D_IN;
    if (stageReg_15_intmc$EN)
      stageReg_15_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_15_intmc$D_IN;
    if (stageReg_15_intmp$EN)
      stageReg_15_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_15_intmp$D_IN;
    if (stageReg_15_stsum$EN)
      stageReg_15_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_15_stsum$D_IN;
    if (stageReg_16_intmc$EN)
      stageReg_16_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_16_intmc$D_IN;
    if (stageReg_16_intmp$EN)
      stageReg_16_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_16_intmp$D_IN;
    if (stageReg_16_stsum$EN)
      stageReg_16_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_16_stsum$D_IN;
    if (stageReg_1_intmc$EN)
      stageReg_1_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_1_intmc$D_IN;
    if (stageReg_1_intmp$EN)
      stageReg_1_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_1_intmp$D_IN;
    if (stageReg_1_stsum$EN)
      stageReg_1_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_1_stsum$D_IN;
    if (stageReg_2_intmc$EN)
      stageReg_2_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_2_intmc$D_IN;
    if (stageReg_2_intmp$EN)
      stageReg_2_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_2_intmp$D_IN;
    if (stageReg_2_stsum$EN)
      stageReg_2_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_2_stsum$D_IN;
    if (stageReg_3_intmc$EN)
      stageReg_3_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_3_intmc$D_IN;
    if (stageReg_3_intmp$EN)
      stageReg_3_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_3_intmp$D_IN;
    if (stageReg_3_stsum$EN)
      stageReg_3_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_3_stsum$D_IN;
    if (stageReg_4_intmc$EN)
      stageReg_4_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_4_intmc$D_IN;
    if (stageReg_4_intmp$EN)
      stageReg_4_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_4_intmp$D_IN;
    if (stageReg_4_stsum$EN)
      stageReg_4_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_4_stsum$D_IN;
    if (stageReg_5_intmc$EN)
      stageReg_5_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_5_intmc$D_IN;
    if (stageReg_5_intmp$EN)
      stageReg_5_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_5_intmp$D_IN;
    if (stageReg_5_stsum$EN)
      stageReg_5_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_5_stsum$D_IN;
    if (stageReg_6_intmc$EN)
      stageReg_6_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_6_intmc$D_IN;
    if (stageReg_6_intmp$EN)
      stageReg_6_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_6_intmp$D_IN;
    if (stageReg_6_stsum$EN)
      stageReg_6_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_6_stsum$D_IN;
    if (stageReg_7_intmc$EN)
      stageReg_7_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_7_intmc$D_IN;
    if (stageReg_7_intmp$EN)
      stageReg_7_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_7_intmp$D_IN;
    if (stageReg_7_stsum$EN)
      stageReg_7_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_7_stsum$D_IN;
    if (stageReg_8_intmc$EN)
      stageReg_8_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_8_intmc$D_IN;
    if (stageReg_8_intmp$EN)
      stageReg_8_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_8_intmp$D_IN;
    if (stageReg_8_stsum$EN)
      stageReg_8_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_8_stsum$D_IN;
    if (stageReg_9_intmc$EN)
      stageReg_9_intmc <= `BSV_ASSIGNMENT_DELAY stageReg_9_intmc$D_IN;
    if (stageReg_9_intmp$EN)
      stageReg_9_intmp <= `BSV_ASSIGNMENT_DELAY stageReg_9_intmp$D_IN;
    if (stageReg_9_stsum$EN)
      stageReg_9_stsum <= `BSV_ASSIGNMENT_DELAY stageReg_9_stsum$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    done = 1'h0;
    inputReg_intmc = 32'hAAAAAAAA;
    inputReg_intmp = 16'hAAAA;
    inputReg_stsum = 32'hAAAAAAAA;
    inputReg_valid = 1'h0;
    outReg_intmc = 32'hAAAAAAAA;
    outReg_intmp = 16'hAAAA;
    outReg_stsum = 32'hAAAAAAAA;
    outReg_valid = 1'h0;
    stageReg_0_intmc = 32'hAAAAAAAA;
    stageReg_0_intmp = 16'hAAAA;
    stageReg_0_stsum = 32'hAAAAAAAA;
    stageReg_0_valid = 1'h0;
    stageReg_10_intmc = 32'hAAAAAAAA;
    stageReg_10_intmp = 16'hAAAA;
    stageReg_10_stsum = 32'hAAAAAAAA;
    stageReg_10_valid = 1'h0;
    stageReg_11_intmc = 32'hAAAAAAAA;
    stageReg_11_intmp = 16'hAAAA;
    stageReg_11_stsum = 32'hAAAAAAAA;
    stageReg_11_valid = 1'h0;
    stageReg_12_intmc = 32'hAAAAAAAA;
    stageReg_12_intmp = 16'hAAAA;
    stageReg_12_stsum = 32'hAAAAAAAA;
    stageReg_12_valid = 1'h0;
    stageReg_13_intmc = 32'hAAAAAAAA;
    stageReg_13_intmp = 16'hAAAA;
    stageReg_13_stsum = 32'hAAAAAAAA;
    stageReg_13_valid = 1'h0;
    stageReg_14_intmc = 32'hAAAAAAAA;
    stageReg_14_intmp = 16'hAAAA;
    stageReg_14_stsum = 32'hAAAAAAAA;
    stageReg_14_valid = 1'h0;
    stageReg_15_intmc = 32'hAAAAAAAA;
    stageReg_15_intmp = 16'hAAAA;
    stageReg_15_stsum = 32'hAAAAAAAA;
    stageReg_15_valid = 1'h0;
    stageReg_16_intmc = 32'hAAAAAAAA;
    stageReg_16_intmp = 16'hAAAA;
    stageReg_16_stsum = 32'hAAAAAAAA;
    stageReg_16_valid = 1'h0;
    stageReg_1_intmc = 32'hAAAAAAAA;
    stageReg_1_intmp = 16'hAAAA;
    stageReg_1_stsum = 32'hAAAAAAAA;
    stageReg_1_valid = 1'h0;
    stageReg_2_intmc = 32'hAAAAAAAA;
    stageReg_2_intmp = 16'hAAAA;
    stageReg_2_stsum = 32'hAAAAAAAA;
    stageReg_2_valid = 1'h0;
    stageReg_3_intmc = 32'hAAAAAAAA;
    stageReg_3_intmp = 16'hAAAA;
    stageReg_3_stsum = 32'hAAAAAAAA;
    stageReg_3_valid = 1'h0;
    stageReg_4_intmc = 32'hAAAAAAAA;
    stageReg_4_intmp = 16'hAAAA;
    stageReg_4_stsum = 32'hAAAAAAAA;
    stageReg_4_valid = 1'h0;
    stageReg_5_intmc = 32'hAAAAAAAA;
    stageReg_5_intmp = 16'hAAAA;
    stageReg_5_stsum = 32'hAAAAAAAA;
    stageReg_5_valid = 1'h0;
    stageReg_6_intmc = 32'hAAAAAAAA;
    stageReg_6_intmp = 16'hAAAA;
    stageReg_6_stsum = 32'hAAAAAAAA;
    stageReg_6_valid = 1'h0;
    stageReg_7_intmc = 32'hAAAAAAAA;
    stageReg_7_intmp = 16'hAAAA;
    stageReg_7_stsum = 32'hAAAAAAAA;
    stageReg_7_valid = 1'h0;
    stageReg_8_intmc = 32'hAAAAAAAA;
    stageReg_8_intmp = 16'hAAAA;
    stageReg_8_stsum = 32'hAAAAAAAA;
    stageReg_8_valid = 1'h0;
    stageReg_9_intmc = 32'hAAAAAAAA;
    stageReg_9_intmp = 16'hAAAA;
    stageReg_9_stsum = 32'hAAAAAAAA;
    stageReg_9_valid = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on
endmodule  // mkInelasticPipe

